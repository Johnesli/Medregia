document.addEventListener('DOMContentLoaded', function () {
  const paymentTableBody = document.getElementById('paymentTableBody');
  const payButtons = paymentTableBody.querySelectorAll('.payBtn');
  const cancelButtons = paymentTableBody.querySelectorAll('.cancelBtn');

  payButtons.forEach((payBtn, index) => {
    payBtn.addEventListener('click', function () {
      const row = this.closest('tr');
      const cancelBtn = row.querySelector('.cancelBtn');
      cancelBtn.style.display = 'inline-block';

      const inputFields = row.querySelectorAll('input');
      inputFields.forEach(input => {
        input.removeAttribute('disabled');
        input.classList.add('border-active');
      });

      // Extract the data you want to send (e.g., invoice ID)
      const invoiceId = row.dataset.invoiceId;

      // TODO: Implement the logic to send data using fetch for the "Pay" button
      const csrfToken = document.querySelector("input[name='csrfmiddlewaretoken']").value;

      // Extract any other relevant data needed for payment
      const paymentData = {
        // Include payment-related data here
      };

      fetch(`/pay_invoice/${invoiceId}/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRFToken': csrfToken,
        },
        body: JSON.stringify(paymentData),
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Payment successful:', data);
        // Add any additional logic after successful payment
      })
      .catch(error => {
        console.error('Error processing payment:', error);
        // Add any error handling logic here
      });

      // After sending data, hide the "Cancel" button
      cancelBtn.addEventListener('click', function () {
        this.style.display = 'none';

        // Add disabled attribute back to input fields
        inputFields.forEach(input => {
          input.setAttribute('disabled', 'true');
          input.classList.remove('border-active');
        });
      });
    });
  });
});


  cancelButtons.forEach(cancelBtn => {
    cancelBtn.addEventListener('click', function () {
      this.style.display = 'none';

      const row = this.closest('tr');
      const inputFields = row.querySelectorAll('input');

      // Add disabled attribute back to input fields
      inputFields.forEach(input => {
        input.setAttribute('disabled', 'true');
        input.classList.remove('border-active');
      });
    });
});